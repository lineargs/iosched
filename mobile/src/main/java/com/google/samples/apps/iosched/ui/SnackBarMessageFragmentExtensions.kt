/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.iosched.ui

import android.arch.lifecycle.LiveData
import android.support.design.widget.CoordinatorLayout
import android.support.v4.app.Fragment
import android.support.v4.content.ContextCompat
import com.google.android.material.widget.Snackbar
import com.google.samples.apps.iosched.R
import com.google.samples.apps.iosched.shared.result.Event
import com.google.samples.apps.iosched.shared.result.EventObserver
import com.google.samples.apps.iosched.ui.messages.SnackbarMessageManager
import timber.log.Timber

/**
 * An extension for Fragments that sets up a Snackbar with a [SnackbarMessageManager].
 */
fun Fragment.setUpSnackbar(
        snackBarMessage: LiveData<Event<SnackbarMessage>>,
        coordinatorLayout: CoordinatorLayout,
        snackbarMessageManager: SnackbarMessageManager) {

    // Show simple snackbar messages generated by the ViewModel
    snackBarMessage.observe(this, EventObserver { message: SnackbarMessage ->
        val duration = if (message.longDuration) Snackbar.LENGTH_LONG else Snackbar.LENGTH_SHORT
        Snackbar.make(coordinatorLayout, message.messageId, duration).apply {
            message.actionId?.let { action ->
                setAction(action, { this.dismiss() })
            }
            setActionTextColor(ContextCompat.getColor(coordinatorLayout.context, R.color.teal))
            show()
        }
    })

    // Important reservations messages are handled with a message manager
    snackbarMessageManager.observeNextMessage().observe(this, EventObserver { message ->
        val duration = if (message.longDuration) Snackbar.LENGTH_LONG else Snackbar.LENGTH_SHORT
        val messageString = context?.getString(message.messageId, message.session?.title)
        if (messageString == null) {
            Timber.e("Empty Snackbar message")
            return@EventObserver
        }

        val snackbar = Snackbar.make(coordinatorLayout, messageString, duration).apply {
            message.actionId?.let { action ->
                setAction(action, { this.dismiss() })
            }
            setActionTextColor(ContextCompat.getColor(coordinatorLayout.context, R.color.teal))
            show()
        }

        // When the snackbar is dismissed, ping the snackbar message manager in case there
        // are pending messages.
        snackbar.addCallback(object : Snackbar.Callback() {
            override fun onDismissed(transientBottomBar: Snackbar?, event: Int) {
                snackbarMessageManager.loadNextMessage()
            }
        })

    })

}
