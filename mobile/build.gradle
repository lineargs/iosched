/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId "com.google.samples.apps.iosched"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCodeMobile
        versionName rootProject.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "float[]",
                "MAP_FLOORPLAN_MAPPING",
                "{${map_floorplan_nw}, ${map_floorplan_ne}, ${map_floorplan_se}}"

        buildConfigField "com.google.android.gms.maps.model.LatLng",
                "MAP_VIEWPORT_BOUND_NW",
                "new com.google.android.gms.maps.model.LatLng(${map_viewport_bound_nw})"
        buildConfigField "com.google.android.gms.maps.model.LatLng",
                "MAP_VIEWPORT_BOUND_SE",
                "new com.google.android.gms.maps.model.LatLng(${map_viewport_bound_se})"

        resValue "dimen", "map_camera_bearing", "${map_default_camera_bearing}"
        resValue "dimen", "map_camera_target_lat", "${map_default_camera_target_lat}"
        resValue "dimen", "map_camera_target_lng", "${map_default_camera_target_lng}"
        resValue "dimen", "map_camera_tilt", "${map_default_camera_tilt}"
        resValue "dimen", "map_camera_zoom", "${map_default_camera_zoom}"
        resValue "dimen", "map_viewport_min_zoom", "${map_viewport_min_zoom}"
        manifestPlaceholders = [crashlyticsEnabled: true]

    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            manifestPlaceholders = [crashlyticsEnabled: true]
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string",
                    "google_maps_key",
                    "AIzaSyD5jqwKMm1SeoYsW25vxCXfTlhDBeZ4H5c"
        }
        debug {
            manifestPlaceholders = [crashlyticsEnabled: false]
            resValue "string",
                    "google_maps_key",
                    "AIzaSyAhJx57ikQH9rYc8IT8W3d2As5cGHMBvuo"
        }
        staging {
            initWith debug

            // Specifies a sorted list of fallback build types that the
            // plugin should try to use when a dependency does not include a
            // "staging" build type.
            // Used with :test-shared, which doesn't have a staging variant.
            matchingFallbacks = ['debug']
        }
    }
    dataBinding {
        enabled true
    }

    signingConfigs {
        // We need to sign debug builds with a debug key to make firebase auth happy
        debug {
            storeFile file("../debug.keystore")
            keyAlias "androiddebugkey"
            keyPassword "android"
            storePassword "android"
        }
    }

    // debug and release variants share the same source dir
    sourceSets {
        debug.java.srcDir 'src/debugRelease/java'
        release.java.srcDir 'src/debugRelease/java'
    }

    lintOptions {
        disable 'MissingTranslation'
    }
}

dependencies {
    implementation project(":shared")
    testImplementation project(':test-shared')

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // UI
    implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:customtabs:$rootProject.supportLibraryVersion"
    implementation "com.android.support.constraint:constraint-layout:$rootProject.constraintLayoutVersion"
    implementation "com.google.android.material:material:$rootProject.mdcVersion"
    implementation "com.google.android:flexbox:$rootProject.flexboxVersion"
    implementation "com.airbnb.android:lottie:$rootProject.lottieVersion"
    implementation "com.pacioianu.david:ink-page-indicator:$rootProject.pageIndicatorVersion"

    // Architecture Components
    implementation "android.arch.lifecycle:extensions:$rootProject.archLifecycleVersion"
    kapt "android.arch.lifecycle:compiler:$rootProject.archLifecycleVersion"
    testImplementation "android.arch.core:core-testing:$rootProject.archLifecycleVersion"

    // Dagger
    implementation "com.google.dagger:dagger-android:$rootProject.dagger"
    implementation "com.google.dagger:dagger-android-support:$rootProject.dagger"
    kapt "com.google.dagger:dagger-compiler:$rootProject.dagger"
    kapt "com.google.dagger:dagger-android-processor:$rootProject.dagger"

    // Glide
    implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    annotationProcessor "com.github.bumptech.glide:compiler:$rootProject.glideVersion"

    // Fabric and Firebase
    implementation("com.firebaseui:firebase-ui-auth:$rootProject.firebaseUiVersion")
    implementation "com.crashlytics.sdk.android:crashlytics:$crashlyticsVersion"

    // Utils
    // Date and time API for Java.
    api "com.jakewharton.threetenabp:threetenabp:$rootProject.threetenabpVersion"
    testImplementation "org.threeten:threetenbp:$rootProject.threetenbpVersion"
    implementation "androidx.core:core-ktx:$rootProject.ktxVersion"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$rootProject.kotlinVersion"

    // Instrumentation tests
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestImplementation "com.android.support.test:runner:$rootProject.runnerVersion"

    // Local unit tests
    testImplementation "junit:junit:$rootProject.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    testImplementation "com.nhaarman:mockito-kotlin:$rootProject.mockitoKotlinVersion"
    testImplementation "org.hamcrest:hamcrest-library:$rootProject.hamcrestVersion"

    // Leak Canary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    stagingImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
}

// Force Dagger's transitive dependencies to use the project's version of the support libraries.
configurations.all {
    resolutionStrategy {
        eachDependency { details ->
            if (details.requested.group == 'com.android.support') {
                details.useVersion supportLibraryVersion
            }
        }
    }
}

apply plugin: 'com.google.gms.google-services'
