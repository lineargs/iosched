/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

android {
    compileSdkVersion rootProject.compileWearSdkVersion

    defaultConfig {
        applicationId "com.google.samples.apps.iosched.wear"
        minSdkVersion rootProject.minWearSdkVersion
        targetSdkVersion rootProject.targetWearSdkVersion
        versionCode rootProject.versionCodeWear
        versionName rootProject.versionName
        manifestPlaceholders = [crashlyticsEnabled: true]
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [crashlyticsEnabled: true]
        }

        staging {
            initWith debug

            // Specifies a sorted list of fallback build types that the
            // plugin should try to use when a dependency does not include a
            // "staging" build type.
            // Used with :test-shared, which doesn't have a staging variant.
            matchingFallbacks = ['debug']
        }

        debug {
            manifestPlaceholders = [crashlyticsEnabled: false]
        }
    }

    // debug and release variants share the same source dir
    sourceSets {
        debug.java.srcDir 'src/debugRelease/java'
        release.java.srcDir 'src/debugRelease/java'
    }
    dataBinding {
        enabled = true
    }

    lintOptions {
        disable "InvalidPackage", "MissingTranslation"
    }
}

repositories {
    // - Other dependencies
    maven { url "${rootProject.projectDir}/../iosched-prebuilts/m2repository" }
    // - Support Libraries, etc
    maven {
        url "${rootProject.projectDir}/../../../prebuilts/fullsdk/linux/extras/support/m2repository"
    }
    maven {
        url "${rootProject.projectDir}/../../../prebuilts/fullsdk/linux/extras/android/m2repository"
    }
}

dependencies {
    implementation project(":shared")
    implementation project(":model")
    testImplementation project(':test-shared')
    testImplementation project(':androidTest-shared')

    // UI
    implementation "androidx.wear:wear:$rootProject.wearVersion"
    compileOnly "com.google.android.wearable:wearable:$rootProject.wearableSupportLibraryVersion"

    // Due to a bug in Databinding, we need this dependency for release variant, or else proguard
    // will fail the build. b/80242780
    releaseImplementation "androidx.cardview:cardview:1.0.0-alpha1"

    // Architecture Components
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycleVersion"
    kapt "androidx.lifecycle:lifecycle-compiler:$rootProject.lifecycleVersion"
    testImplementation "androidx.arch.core:core-testing:$rootProject.lifecycleVersion"

    // Dagger
    implementation "com.google.dagger:dagger-android:$rootProject.dagger"
    implementation "com.google.dagger:dagger-android-support:$rootProject.dagger"
    kapt "com.google.dagger:dagger-compiler:$rootProject.dagger"
    kapt "com.google.dagger:dagger-android-processor:$rootProject.dagger"

    // Utils
    // Date and time API for Java.
    api "com.jakewharton.threetenabp:threetenabp:$rootProject.threetenabpVersion"
    testImplementation "org.threeten:threetenbp:$rootProject.threetenbpVersion"

    // Fabric and Firebase
    implementation "com.crashlytics.sdk.android:crashlytics:$crashlyticsVersion"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$rootProject.kotlinVersion"

    // Instrumentation tests
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test:runner:$rootProject.runnerVersion"

    // Local unit tests
    testImplementation "junit:junit:$rootProject.junitVersion"
    testImplementation "org.hamcrest:hamcrest-library:$rootProject.hamcrestVersion"
}

apply plugin: 'com.google.gms.google-services'
